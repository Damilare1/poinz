import {v4 as uuid} from 'uuid';
import {newMockRoomsStore} from './testUtils';
import processorFactory from '../../src/commandProcessor';

test('process a dummy command successfully: create room on the fly', () => {
  const processor = processorFactory(
    {
      setUsername: {
        canCreateRoom: true,
        skipUserIdRoomCheck: true,
        fn: (room, command) => room.applyEvent('usernameSet', command.payload)
      }
    },
    {
      usernameSet: (room) => room.set('test', 'data.from.evt.handler')
    },
    newMockRoomsStore()
    /*  no room exists in store */
  );

  const commandId = uuid();
  return processor(
    {
      roomId: 'custom-room-id',
      id: commandId,
      name: 'setUsername',
      payload: {
        username: 'john'
      }
    },
    'abc'
  ).then(({producedEvents, room}) => {
    expect(producedEvents).toMatchEvents(
      commandId,
      producedEvents[0].roomId, // id is generated by commandprocessor
      'usernameSet'
    );

    expect(room).toBeDefined();
    expect(room.id).toBe('custom-room-id');
    expect(room.pristine).toBe(true);
    expect(room.test).toEqual('data.from.evt.handler');
  });
});

test('process a dummy command successfully: room loading by id', () => {
  const roomId = 'some-room-id_' + uuid();
  const roomStore = newMockRoomsStore({
    id: roomId
  });
  const processor = processorFactory(
    {
      setUsername: {
        canCreateRoom: false,
        skipUserIdRoomCheck: true,
        fn: (room, command) => room.applyEvent('usernameSet', command.payload)
      }
    },
    {
      usernameSet: (room) => room.set('test', 'data.from.evt.handler')
    },
    roomStore
  );

  const commandId = uuid();
  return processor(
    {
      id: commandId,
      roomId: roomId,
      name: 'setUsername',
      payload: {
        username: 'john'
      }
    },
    'abc'
  ).then(({producedEvents, room}) => {
    expect(producedEvents).toMatchEvents(
      commandId,
      producedEvents[0].roomId, // id is generated by commandprocessor
      'usernameSet'
    );

    expect(room).toBeDefined();
    expect(room.test).toEqual('data.from.evt.handler');
  });
});

test('process a dummy command with No Handler', () => {
  const processor = processorFactory(
    {
      // no command handlers
    },
    {
      // no event handlers
    },
    newMockRoomsStore()
  );

  return expect(
    processor(
      {
        id: uuid(),
        roomId: 'my-test-room',
        name: 'setUsername',
        payload: {
          username: 'john'
        }
      },
      'abc'
    )
  ).rejects.toThrow('No command handler found for setUsername');
});

test('process a dummy command where command handler produced unknown event', () => {
  const processor = processorFactory(
    {
      setUsername: {
        canCreateRoom: true,
        skipUserIdRoomCheck: true,
        fn: (room) => room.applyEvent('unknownEvent', {})
      }
    },
    {
      // no event handlers
    },
    newMockRoomsStore()
  );

  return expect(
    processor(
      {
        id: uuid(),
        roomId: 'some-room-id',
        name: 'setUsername',
        payload: {
          username: 'john'
        }
      },
      'abc'
    )
  ).rejects.toThrow('Cannot apply unknown event unknownEvent');
});

test('process a dummy command where command precondition throws', () => {
  const processor = processorFactory(
    {
      setUsername: {
        canCreateRoom: true,
        skipUserIdRoomCheck: true,
        preCondition: () => {
          throw new Error('Uh-uh. nono!');
        }
      }
    },
    {
      // no event handlers
    },
    newMockRoomsStore()
  );

  return expect(
    processor(
      {
        id: uuid(),
        roomId: 'some-room-id',
        name: 'setUsername',
        payload: {
          username: 'john'
        }
      },
      'abc'
    )
  ).rejects.toThrow('Precondition Error during "setUsername": Uh-uh. nono!');
});

test('process a dummy command where user does not belong to room', () => {
  const processor = processorFactory(
    {
      setUsername: {
        canCreateRoom: true
        // here "skipUserIdRoomCheck" flag is not set (like for most handlers)
      }
    },
    {
      // no event handlers
    },
    newMockRoomsStore()
  );

  return expect(
    processor(
      {
        id: uuid(),
        roomId: 'some-room-id',
        name: 'setUsername',
        payload: {
          username: 'john'
        }
      },
      'abc'
    )
  ).rejects.toThrow(
    'Precondition Error during "setUsername": Given user abc does not belong to room some-room-id'
  );
});

test('process a dummy command where command validation fails', () => {
  const processor = processorFactory({}, {}, newMockRoomsStore());

  return expect(
    processor(
      {
        id: uuid(),
        roomId: 'my-test-room',
        // no name -> cannot load appropriate schema
        payload: {}
      },
      'abc'
    )
  ).rejects.toThrow('Command validation Error during "undefined": Command must contain a name');
});

test('process a dummy command where command validation fails (schema)', () => {
  const processor = processorFactory({}, {}, newMockRoomsStore());

  return expect(
    processor(
      {
        id: uuid(),
        roomId: 'my-test-room',
        name: 'setUsername',
        payload: {}
      },
      'abc'
    )
  ).rejects.toThrow('Missing required property');
});

test('process a dummy command without roomId: where room must exist', () => {
  const processor = processorFactory(
    {
      setUsername: {
        fn: () => {}
      }
    },
    {},
    newMockRoomsStore()
  );

  return expect(
    processor(
      {
        id: uuid(),
        roomId: 'some-room-id',
        name: 'setUsername',
        payload: {
          username: 'john'
        }
      },
      'abc'
    )
  ).rejects.toThrow(
    // no roomId given in command. handler does not allow creation of new room
    'Command "setUsername" only wants to get handled for an existing room'
  );
});

test('process a dummy command with roomId: where room must exist', () => {
  const processor = processorFactory(
    {
      setUsername: {
        fn: () => {}
      }
    },
    {},
    newMockRoomsStore()
  );

  return expect(
    processor(
      {
        id: uuid(),
        roomId: 'rm_' + uuid(),
        name: 'setUsername',
        payload: {
          username: 'john'
        }
      },
      'abc'
    )
  ).rejects.toThrow(
    //  roomId is given in command, room does not exist. handler does not allow on-the-fly creation
    'Command "setUsername" only wants to get handled for an existing room!'
  );
});

/**
 * Assures that we handle two "simultaneously" incoming commands correctly.
 */
test('concurrency handling', () => {
  const mockRoomsStore = newMockRoomsStore({
    id: 'concurrency-test-room',
    manipulationCount: 0
  });

  const processor = processorFactory(
    {
      setUsername: {
        skipUserIdRoomCheck: true,
        fn: (room, command) => room.applyEvent('usernameSet', command.payload)
      }
    },
    {
      usernameSet: (room, eventPayload) =>
        room
          .set('username', eventPayload.username)
          .set('manipulationCount', room.get('manipulationCount') + 1)
    },
    mockRoomsStore
  );

  const eventPromiseOne = processor(
    {
      id: uuid(),
      roomId: 'concurrency-test-room',
      name: 'setUsername',
      payload: {
        username: 'tom'
      }
    },
    '1'
  );
  const eventPromiseTwo = processor(
    {
      id: uuid(),
      roomId: 'concurrency-test-room',
      name: 'setUsername',
      payload: {
        username: 'jerry'
      }
    },
    '1'
  );

  return Promise.all([eventPromiseOne, eventPromiseTwo])
    .then(() => mockRoomsStore.getRoomById('concurrency-test-room'))
    .then((room) => expect(room.get('manipulationCount')).toBe(2));
});
